// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: internal/grpc/api/abf.proto

package api

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RateLimitService_CheckLimits_FullMethodName     = "/api.RateLimitService/CheckLimits"
	RateLimitService_ResetLimits_FullMethodName     = "/api.RateLimitService/ResetLimits"
	RateLimitService_AddToBlack_FullMethodName      = "/api.RateLimitService/AddToBlack"
	RateLimitService_AddToWhite_FullMethodName      = "/api.RateLimitService/AddToWhite"
	RateLimitService_RemoveFromBlack_FullMethodName = "/api.RateLimitService/RemoveFromBlack"
	RateLimitService_RemoveFromWhite_FullMethodName = "/api.RateLimitService/RemoveFromWhite"
)

// RateLimitServiceClient is the client API for RateLimitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RateLimitServiceClient interface {
	CheckLimits(ctx context.Context, in *AuthData, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	ResetLimits(ctx context.Context, in *AuthData, opts ...grpc.CallOption) (*empty.Empty, error)
	AddToBlack(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*empty.Empty, error)
	AddToWhite(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveFromBlack(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*empty.Empty, error)
	RemoveFromWhite(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*empty.Empty, error)
}

type rateLimitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRateLimitServiceClient(cc grpc.ClientConnInterface) RateLimitServiceClient {
	return &rateLimitServiceClient{cc}
}

func (c *rateLimitServiceClient) CheckLimits(ctx context.Context, in *AuthData, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, RateLimitService_CheckLimits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitServiceClient) ResetLimits(ctx context.Context, in *AuthData, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, RateLimitService_ResetLimits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitServiceClient) AddToBlack(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, RateLimitService_AddToBlack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitServiceClient) AddToWhite(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, RateLimitService_AddToWhite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitServiceClient) RemoveFromBlack(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, RateLimitService_RemoveFromBlack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimitServiceClient) RemoveFromWhite(ctx context.Context, in *Ip, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, RateLimitService_RemoveFromWhite_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RateLimitServiceServer is the server API for RateLimitService service.
// All implementations must embed UnimplementedRateLimitServiceServer
// for forward compatibility
type RateLimitServiceServer interface {
	CheckLimits(context.Context, *AuthData) (*wrappers.BoolValue, error)
	ResetLimits(context.Context, *AuthData) (*empty.Empty, error)
	AddToBlack(context.Context, *Ip) (*empty.Empty, error)
	AddToWhite(context.Context, *Ip) (*empty.Empty, error)
	RemoveFromBlack(context.Context, *Ip) (*empty.Empty, error)
	RemoveFromWhite(context.Context, *Ip) (*empty.Empty, error)
	mustEmbedUnimplementedRateLimitServiceServer()
}

// UnimplementedRateLimitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRateLimitServiceServer struct {
}

func (UnimplementedRateLimitServiceServer) CheckLimits(context.Context, *AuthData) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLimits not implemented")
}
func (UnimplementedRateLimitServiceServer) ResetLimits(context.Context, *AuthData) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetLimits not implemented")
}
func (UnimplementedRateLimitServiceServer) AddToBlack(context.Context, *Ip) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToBlack not implemented")
}
func (UnimplementedRateLimitServiceServer) AddToWhite(context.Context, *Ip) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToWhite not implemented")
}
func (UnimplementedRateLimitServiceServer) RemoveFromBlack(context.Context, *Ip) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromBlack not implemented")
}
func (UnimplementedRateLimitServiceServer) RemoveFromWhite(context.Context, *Ip) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromWhite not implemented")
}
func (UnimplementedRateLimitServiceServer) mustEmbedUnimplementedRateLimitServiceServer() {}

// UnsafeRateLimitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RateLimitServiceServer will
// result in compilation errors.
type UnsafeRateLimitServiceServer interface {
	mustEmbedUnimplementedRateLimitServiceServer()
}

func RegisterRateLimitServiceServer(s grpc.ServiceRegistrar, srv RateLimitServiceServer) {
	s.RegisterService(&RateLimitService_ServiceDesc, srv)
}

func _RateLimitService_CheckLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServiceServer).CheckLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimitService_CheckLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServiceServer).CheckLimits(ctx, req.(*AuthData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitService_ResetLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServiceServer).ResetLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimitService_ResetLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServiceServer).ResetLimits(ctx, req.(*AuthData))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitService_AddToBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServiceServer).AddToBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimitService_AddToBlack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServiceServer).AddToBlack(ctx, req.(*Ip))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitService_AddToWhite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServiceServer).AddToWhite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimitService_AddToWhite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServiceServer).AddToWhite(ctx, req.(*Ip))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitService_RemoveFromBlack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServiceServer).RemoveFromBlack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimitService_RemoveFromBlack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServiceServer).RemoveFromBlack(ctx, req.(*Ip))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimitService_RemoveFromWhite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ip)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimitServiceServer).RemoveFromWhite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RateLimitService_RemoveFromWhite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimitServiceServer).RemoveFromWhite(ctx, req.(*Ip))
	}
	return interceptor(ctx, in, info, handler)
}

// RateLimitService_ServiceDesc is the grpc.ServiceDesc for RateLimitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RateLimitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.RateLimitService",
	HandlerType: (*RateLimitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckLimits",
			Handler:    _RateLimitService_CheckLimits_Handler,
		},
		{
			MethodName: "ResetLimits",
			Handler:    _RateLimitService_ResetLimits_Handler,
		},
		{
			MethodName: "AddToBlack",
			Handler:    _RateLimitService_AddToBlack_Handler,
		},
		{
			MethodName: "AddToWhite",
			Handler:    _RateLimitService_AddToWhite_Handler,
		},
		{
			MethodName: "RemoveFromBlack",
			Handler:    _RateLimitService_RemoveFromBlack_Handler,
		},
		{
			MethodName: "RemoveFromWhite",
			Handler:    _RateLimitService_RemoveFromWhite_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/api/abf.proto",
}
